<ResourceDictionary x:Class="MinimalisticView.StyleOverrides" x:ClassModifier="public"
										xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
										xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
										xmlns:local="clr-namespace:MinimalisticView"
                    xmlns:win="windows"
                    xmlns:sd="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                    xmlns:bthvc="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
										xmlns:vs="clr-namespace:Microsoft.VisualStudio.PlatformUI.Shell.Controls;assembly=Microsoft.VisualStudio.Shell.ViewManager"
                    xmlns:vp="clr-namespace:Microsoft.VisualStudio.PlatformUI.Shell.Controls;assembly=Microsoft.VisualStudio.Shell.ViewManager"
										xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.PlatformUI.Shell;assembly=Microsoft.VisualStudio.Shell.ViewManager"
										xmlns:vsinternal="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.UI.Internal">
	<!-- Just squash everything to 0 height to avoid breaking stuff -->
	<!-- This is almost unchanged source style -->  
    <Style x:Key="{x:Type vs:DocumentGroupControl}" TargetType="{x:Type vs:DocumentGroupControl}">
      <Style.Resources>
        <ResourceDictionary>
          <DataTemplate DataType="{x:Type vsshell:View}">
            <vp:ViewPresenter ContentControl.Content="{Binding Content}" View="{Binding}" ContainingElement="{Binding}" />
          </DataTemplate>
          <vp:MenuItemIconConverter x:Key="MenuItemIconConverter" />
          <bthvc:BooleanToHiddenVisibilityConverter x:Key="BooleanToHiddenVisibilityConverter" />
        </ResourceDictionary>
      </Style.Resources>
      <Setter Property="InputMethod.IsInputMethodSuspended" Value="True" />
      <Setter Property="Control.BorderBrush" Value="#FFA9A9A9" />
      <Setter Property="Control.Background" Value="#FFFFFFFF" />
      <Setter Property="Control.BorderThickness" Value="1" />
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type vs:DocumentGroupControl}">
            <vp:DockTarget x:Name="MainDockTarget" DockSiteType="NonDraggable" DockTargetType="Inside" Background="#00FFFFFF">
              <DockPanel SnapsToDevicePixels="True">
                <Grid KeyboardNavigation.TabNavigation="Local">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Uid="TabsColumn" Width="*" />
                    <ColumnDefinition x:Uid="OverflowColumn" Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <!-- Changed from auto to 0 -->
									  <RowDefinition x:Uid="TabsRow" Height="0"/>
                    <RowDefinition x:Uid="ContentRow" Height="*" />
                  </Grid.RowDefinitions>
                  <vp:DockTarget x:Name="InsertTabPreviewDockTarget" DockTargetType="InsertTabPreview" Grid.Column="0" Grid.Row="0" Background="#FFFFFFFF" AdornmentTarget="{Binding ElementName=MainDockTarget}">
                    <vp:DocumentTabPanel x:Name="PART_TabPanel" ZIndex="1" KeyboardNavigation.TabIndex="1" Margin="2,2,2,0" IsItemsHost="True" ExpandedTearOffMargin="50" />
                  </vp:DockTarget>
                  <DockPanel Margin="0,0,0,3" LastChildFill="False" Grid.Row="0" Grid.Column="1">
                    <vp:DropDownButton x:Name="PART_TabPopupButton" ButtonBase.ClickMode="Press" FrameworkElement.Width="14" FrameworkElement.Height="14" DockPanel.Dock="Bottom" HoverBorderBrush="#FF3399FF" HoverBorderThickness="1" PressedBorderBrush="#FF006CD8" PressedBorderThickness="1" IsChecked="{Binding Path=ContextMenu.IsOpen, RelativeSource={RelativeSource Self}}">
                      <FrameworkElement.Resources>
                        <CollectionViewSource x:Key="ContextMenuItemSource" Source="{Binding Path=VisibleChildren}">
                          <CollectionViewSource.SortDescriptions>
                            <sd:SortDescription Direction="Ascending" PropertyName="Title.Title" />
                          </CollectionViewSource.SortDescriptions>
                        </CollectionViewSource>
                      </FrameworkElement.Resources>
                      <vp:DropDownButton.HoverBackground>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                          <GradientStop Color="#C3E6F4" Offset="0" />
                          <GradientStop Color="#C3E6F4" Offset="0.5" />
                          <GradientStop Color="#B6E4F7" Offset="0.5" />
                          <GradientStop Color="#B6E4F7" Offset="1" />
                        </LinearGradientBrush>
                      </vp:DropDownButton.HoverBackground>
                      <vp:DropDownButton.PressedBackground>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                          <GradientStop Color="#D2E9F2" Offset="0" />
                          <GradientStop Color="#D2E9F2" Offset="0.5" />
                          <GradientStop Color="#C3E6F4" Offset="0.5" />
                          <GradientStop Color="#C3E6F4" Offset="1" />
                        </LinearGradientBrush>
                      </vp:DropDownButton.PressedBackground>
                      <StackPanel Orientation="Vertical" Width="8" Height="8">
                        <Path Name="DropDownButtonBar" Fill="#FF222222" Width="8" Height="4" Data="M0,0L8,0 8,2 0,2 0,0" SnapsToDevicePixels="True" Visibility="{Binding ElementName=PART_TabPanel, Path=HasOverflowItems, Converter={StaticResource BooleanToHiddenVisibilityConverter}}" />
                        <Path Fill="#FF222222" Width="8" Height="4" Data="F1M0,0L4,4 8,0 0,0z" SnapsToDevicePixels="True" />
                      </StackPanel>
                      <FrameworkElement.ContextMenu>
                        <ContextMenu DataContext="{StaticResource ContextMenuItemSource}" IsTextSearchEnabled="True" TextSearch.TextPath="Title.Title" ItemsSource="{Binding}">
                          <ContextMenu.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                              <Setter Property="HeaderedItemsControl.Header" Value="{Binding Path=Title.Title}" />
                              <Setter Property="MenuItem.Icon" Value="{Binding Path=Title.Icon, Converter={StaticResource MenuItemIconConverter}}" />
                              <Setter Property="MenuItem.Command" Value="{x:Static vs:ViewCommands.ActivateDocumentViewCommand}" />
                              <Setter Property="MenuItem.CommandParameter" Value="{Binding}" />
                            </Style>
                          </ContextMenu.ItemContainerStyle>
                          <ContextMenu.ItemTemplate>
                            <DataTemplate DataType="{x:Type vsshell:View}">
                              <!-- produces compile error -->
                              <!--DataTemplateKey.Key>{x:Type vsshell:View}</DataTemplateKey.Key-->
                              <ContentPresenter Content="{Binding}" />
                            </DataTemplate>
                          </ContextMenu.ItemTemplate>
                        </ContextMenu>
                      </FrameworkElement.ContextMenu>
                    </vp:DropDownButton>
                  </DockPanel>
                  <Border Name="PART_ContentPanel" Background="{TemplateBinding Control.Background}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2">
                    <ContentPresenter Name="PART_SelectedContentHost" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="{TemplateBinding Control.Padding}" ContentSource="SelectedContent" />
                  </Border>
                </Grid>
              </DockPanel>
            </vp:DockTarget>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
              </Trigger>
              <DataTrigger Value="True" Binding="{Binding Source={x:Static vsshell:ViewManager.Instance}, Path=Preferences.AllowDocumentTabAutoDocking}">
                <Setter TargetName="InsertTabPreviewDockTarget" Property="vs:DockTarget.DockTargetType" Value="Auto" />
              </DataTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="ItemsControl.ItemTemplate" Value="{DynamicResource {x:Static vs:DocumentGroupControl.ItemTemplateKey}}" />
    </Style>
  </ResourceDictionary>